//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CryostatControlClient.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICommandService")]
    public interface ICommandService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/IsAlive", ReplyAction="http://tempuri.org/ICommandService/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/IsAlive", ReplyAction="http://tempuri.org/ICommandService/IsAliveResponse")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/Cooldown", ReplyAction="http://tempuri.org/ICommandService/CooldownResponse")]
        bool Cooldown();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/Cooldown", ReplyAction="http://tempuri.org/ICommandService/CooldownResponse")]
        System.Threading.Tasks.Task<bool> CooldownAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/Recycle", ReplyAction="http://tempuri.org/ICommandService/RecycleResponse")]
        bool Recycle();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/Recycle", ReplyAction="http://tempuri.org/ICommandService/RecycleResponse")]
        System.Threading.Tasks.Task<bool> RecycleAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/Warmup", ReplyAction="http://tempuri.org/ICommandService/WarmupResponse")]
        bool Warmup();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/Warmup", ReplyAction="http://tempuri.org/ICommandService/WarmupResponse")]
        System.Threading.Tasks.Task<bool> WarmupAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ReadSensor", ReplyAction="http://tempuri.org/ICommandService/ReadSensorResponse")]
        float ReadSensor(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICommandService/ReadSensor", ReplyAction="http://tempuri.org/ICommandService/ReadSensorResponse")]
        System.Threading.Tasks.Task<float> ReadSensorAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICommandServiceChannel : CryostatControlClient.ServiceReference1.ICommandService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CommandServiceClient : System.ServiceModel.ClientBase<CryostatControlClient.ServiceReference1.ICommandService>, CryostatControlClient.ServiceReference1.ICommandService {
        
        public CommandServiceClient() {
        }
        
        public CommandServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CommandServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommandServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CommandServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
        
        public bool Cooldown() {
            return base.Channel.Cooldown();
        }
        
        public System.Threading.Tasks.Task<bool> CooldownAsync() {
            return base.Channel.CooldownAsync();
        }
        
        public bool Recycle() {
            return base.Channel.Recycle();
        }
        
        public System.Threading.Tasks.Task<bool> RecycleAsync() {
            return base.Channel.RecycleAsync();
        }
        
        public bool Warmup() {
            return base.Channel.Warmup();
        }
        
        public System.Threading.Tasks.Task<bool> WarmupAsync() {
            return base.Channel.WarmupAsync();
        }
        
        public float ReadSensor(int id) {
            return base.Channel.ReadSensor(id);
        }
        
        public System.Threading.Tasks.Task<float> ReadSensorAsync(int id) {
            return base.Channel.ReadSensorAsync(id);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDataGet", CallbackContract=typeof(CryostatControlClient.ServiceReference1.IDataGetCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IDataGet {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDataGet/SubscribeForData")]
        void SubscribeForData(int interval);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDataGet/SubscribeForData")]
        System.Threading.Tasks.Task SubscribeForDataAsync(int interval);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDataGet/UnsubscribeForData")]
        void UnsubscribeForData();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDataGet/UnsubscribeForData")]
        System.Threading.Tasks.Task UnsubscribeForDataAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataGetCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IDataGet/SendData")]
        void SendData(double[] data);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDataGetChannel : CryostatControlClient.ServiceReference1.IDataGet, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DataGetClient : System.ServiceModel.DuplexClientBase<CryostatControlClient.ServiceReference1.IDataGet>, CryostatControlClient.ServiceReference1.IDataGet {
        
        public DataGetClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public DataGetClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public DataGetClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DataGetClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public DataGetClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SubscribeForData(int interval) {
            base.Channel.SubscribeForData(interval);
        }
        
        public System.Threading.Tasks.Task SubscribeForDataAsync(int interval) {
            return base.Channel.SubscribeForDataAsync(interval);
        }
        
        public void UnsubscribeForData() {
            base.Channel.UnsubscribeForData();
        }
        
        public System.Threading.Tasks.Task UnsubscribeForDataAsync() {
            return base.Channel.UnsubscribeForDataAsync();
        }
    }
}
